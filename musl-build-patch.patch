diff --git a/tensorflow/tensorflow.bzl b/tensorflow/tensorflow.bzl
index 69d45283..d31c82c1 100644
--- a/tensorflow/tensorflow.bzl
+++ b/tensorflow/tensorflow.bzl
@@ -335,6 +335,17 @@ def if_indexing_source_code(
         "//conditions:default": if_false,
     })
 
+# Linux systems may required -lexecinfo linker flag for e.g. with
+# musl-based OS
+def lexecinfo_if_needed():
+    lib = ["-lexecinfo"]
+    return select({
+        clean_dep("//tensorflow:linux_aarch64"): lib,
+        clean_dep("//tensorflow:linux_x86_64"): lib,
+        clean_dep("//tensorflow:linux_ppc64le"): lib,
+        "//conditions:default": lib,
+    })
+
 # Linux systems may required -lrt linker flag for e.g. clock_gettime
 # see https://github.com/tensorflow/tensorflow/issues/15129
 def lrt_if_needed():
@@ -680,7 +691,7 @@ def tf_cc_shared_object(
         srcs = [],
         deps = [],
         data = [],
-        linkopts = lrt_if_needed(),
+        linkopts = lrt_if_needed() + lexecinfo_if_needed(),
         framework_so = tf_binary_additional_srcs(),
         soversion = None,
         kernels = [],
@@ -785,7 +796,7 @@ def tf_cc_shared_library(
         exports_filter = [],
         data = [],
         copts = [],
-        linkopts = lrt_if_needed(),
+        linkopts = lrt_if_needed() + lexecinfo_if_needed(),
         additional_linker_inputs = [],
         linkstatic = True,
         framework_so = [clean_dep("//tensorflow:libtensorflow_framework_import_lib")],
@@ -948,7 +959,7 @@ def tf_cc_binary(
         srcs = [],
         deps = [],
         data = [],
-        linkopts = lrt_if_needed(),
+        linkopts = lrt_if_needed() + lexecinfo_if_needed(),
         copts = tf_copts(),
         kernels = [],
         per_os_targets = False,  # Generate targets with SHARED_LIBRARY_NAME_PATTERNS
@@ -1021,7 +1032,7 @@ def tf_native_cc_binary(
                 "-lpthread",
                 "-lm",
             ],
-        }) + linkopts + _rpath_linkopts(name) + lrt_if_needed(),
+        }) + linkopts + _rpath_linkopts(name) + lrt_if_needed() + lexecinfo_if_needed(),
         **kwargs
     )
 
@@ -1042,7 +1053,7 @@ def tf_gen_op_wrapper_cc(
     tf_cc_binary(
         name = tool,
         copts = tf_copts(),
-        linkopts = if_not_windows(["-lm", "-Wl,-ldl"]) + lrt_if_needed(),
+        linkopts = if_not_windows(["-lm", "-Wl,-ldl"]) + lrt_if_needed() + lexecinfo_if_needed(),
         linkstatic = 1,  # Faster to link this one-time-use binary dynamically
         deps = [op_gen] + deps,
     )
@@ -1222,7 +1233,7 @@ def tf_gen_op_wrapper_py(
         generated_target_name = None,
         op_whitelist = [],
         op_allowlist = [],
-        cc_linkopts = lrt_if_needed(),
+        cc_linkopts = lrt_if_needed() + lexecinfo_if_needed(),
         api_def_srcs = [],
         compatible_with = [],
         testonly = False):
@@ -1347,7 +1358,7 @@ def tf_cc_test(
         linkstatic = 0,
         extra_copts = [],
         suffix = "",
-        linkopts = lrt_if_needed(),
+        linkopts = lrt_if_needed() + lexecinfo_if_needed(),
         kernels = [],
         **kwargs):
     cc_test(
@@ -1532,7 +1543,7 @@ def tf_cc_tests(
         tags = [],
         size = "medium",
         args = None,
-        linkopts = lrt_if_needed(),
+        linkopts = lrt_if_needed() + lexecinfo_if_needed(),
         kernels = [],
         create_named_test_suite = False,
         visibility = None):
diff --git a/third_party/llvm/alpine_build_fix.patch b/third_party/llvm/alpine_build_fix.patch
new file mode 100644
index 00000000..32fb6dd1
--- /dev/null
+++ b/third_party/llvm/alpine_build_fix.patch
@@ -0,0 +1,43 @@
+diff --git a/utils/bazel/llvm-project-overlay/llvm/config.bzl b/utils/bazel/llvm-project-overlay/llvm/config.bzl
+index 5beb3cc7c..a7093a1c9 100644
+--- a/utils/bazel/llvm-project-overlay/llvm/config.bzl
++++ b/utils/bazel/llvm-project-overlay/llvm/config.bzl
+@@ -27,9 +27,9 @@ posix_defines = [
+     "LLVM_ENABLE_THREADS=1",
+     "HAVE_DEREGISTER_FRAME=1",
+     "HAVE_LIBPTHREAD=1",
+-    "HAVE_PTHREAD_GETNAME_NP=1",
++    "HAVE_PTHREAD_GETNAME_NP=0",
+     "HAVE_PTHREAD_H=1",
+-    "HAVE_PTHREAD_SETNAME_NP=1",
++    "HAVE_PTHREAD_SETNAME_NP=0",
+     "HAVE_REGISTER_FRAME=1",
+     "HAVE_SETENV_R=1",
+     "HAVE_STRERROR_R=1",
+@@ -41,7 +41,7 @@ linux_defines = posix_defines + [
+     "_GNU_SOURCE",
+     "HAVE_LINK_H=1",
+     "HAVE_LSEEK64=1",
+-    "HAVE_MALLINFO=1",
++    "HAVE_MALLINFO=0",
+     "HAVE_SBRK=1",
+     "HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC=1",
+ ]
+diff --git a/utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h b/utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h
+index 03eb4ff2c..a7e784375 100644
+--- a/utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h
++++ b/utils/bazel/llvm-project-overlay/llvm/include/llvm/Config/config.h
+@@ -133,13 +133,10 @@
+ /* #undef HAVE_LIBPSAPI */
+ 
+ /* Define to 1 if you have the `pthread' library (-lpthread). */
+-#define HAVE_LIBPTHREAD 1
+ 
+ /* Define to 1 if you have the `pthread_getname_np' function. */
+-#define HAVE_PTHREAD_GETNAME_NP 1
+ 
+ /* Define to 1 if you have the `pthread_setname_np' function. */
+-#define HAVE_PTHREAD_SETNAME_NP 1
+ 
+ /* Define to 1 if you have the <link.h> header file. */
+ /* HAVE_LINK_H defined in Bazel */
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index c9760c3a..02ce9e3c 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -20,6 +20,7 @@ def repo(name):
             "//third_party/llvm:infer_type.patch",  # TODO(b/231285230): remove once resolved
             "//third_party/llvm:build.patch",
             "//third_party/llvm:macos_build_fix.patch",
+            "//third_party/llvm:alpine_build_fix.patch"
         ],
         link_files = {"//third_party/llvm:run_lit.sh": "mlir/run_lit.sh"},
     )
