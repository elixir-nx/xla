name: Release
on:
  push:
    tags:
      - "v*.*.*"

env:
  NX_XLA_REF: ${{ github.ref_name }}
  NX_XLA_RELEASE_NAME: ${{ github.ref_name }}

  # Build envs for non-Docker jobs.
  USE_BAZEL_VERSION: 7.4.1
  XLA_BUILD: true
  XLA_CACHE_DIR: tmp/cache

jobs:
  linux-cpu:
    name: "x86_64-linux-gnu-cpu"
    runs-on: ubuntu-24.04
    steps:
      # Free up space, see https://github.com/orgs/community/discussions/25678#discussioncomment-5242449
      - run: rm -rf /opt/hostedtoolcache
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.NX_XLA_REF }}
      - run: builds/build.sh cpu
      - run: .github/scripts/upload_artifact.sh ${{ env.NX_XLA_REF }} ${{ env.NX_XLA_RELEASE_NAME }} builds/output/*/cache/*/build/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  linux-cuda:
    name: "x86_64-linux-gnu-cuda12"
    runs-on: ubuntu-24.04
    steps:
      # Free up space, see https://github.com/orgs/community/discussions/25678#discussioncomment-5242449
      - run: rm -rf /opt/hostedtoolcache
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.NX_XLA_REF }}
      - run: builds/build.sh cuda12
      - run: .github/scripts/upload_artifact.sh ${{ env.NX_XLA_REF }} ${{ env.NX_XLA_RELEASE_NAME }} builds/output/*/cache/*/build/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  linux-tpu:
    name: "x86_64-linux-gnu-tpu"
    runs-on: ubuntu-24.04
    steps:
      # Free up space, see https://github.com/orgs/community/discussions/25678#discussioncomment-5242449
      - run: rm -rf /opt/hostedtoolcache
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.NX_XLA_REF }}
      - run: builds/build.sh tpu
      - run: .github/scripts/upload_artifact.sh ${{ env.NX_XLA_REF }} ${{ env.NX_XLA_RELEASE_NAME }} builds/output/*/cache/*/build/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  linux-arm-cpu:
    name: "aarch64-linux-gnu-cpu"
    runs-on: ubuntu-24.04-arm
    steps:
      # Free up space, see https://github.com/orgs/community/discussions/25678#discussioncomment-5242449
      - run: rm -rf /opt/hostedtoolcache
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.NX_XLA_REF }}
      - run: builds/build.sh cpu
      - run: .github/scripts/upload_artifact.sh ${{ env.NX_XLA_REF }} ${{ env.NX_XLA_RELEASE_NAME }} builds/output/*/cache/*/build/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  linux-arm-cuda:
    name: "aarch64-linux-gnu-cuda12"
    runs-on: ubuntu-24.04-arm
    steps:
      # Free up space, see https://github.com/orgs/community/discussions/25678#discussioncomment-5242449
      - run: rm -rf /opt/hostedtoolcache
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.NX_XLA_REF }}
      - run: builds/build.sh cuda12
      - run: .github/scripts/upload_artifact.sh ${{ env.NX_XLA_REF }} ${{ env.NX_XLA_RELEASE_NAME }} builds/output/*/cache/*/build/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  macos:
    name: "x86_64-darwin-cpu"
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.NX_XLA_REF }}
      - run: brew install elixir
      - run: mix local.hex --force
      # Setup the compilation environment
      - uses: bazel-contrib/setup-bazel@0.14.0
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: python -m pip install --upgrade pip numpy
      # Build and upload the archive
      - run: mix deps.get
      - run: mix compile
        env:
          XLA_TARGET: cpu
          # This runner comes with Clang 14, which does not support the -mavxvnniint8
          # CLI flag. We can install newer Clang, however at some point Bazel toolchains
          # invoke xcrun clang, which always uses the system version from Xcode, ignoring
          # whichever version we installed ourselves. With the flag below, we make sure
          # this flag is not passed in the first place.
          # See https://github.com/tensorflow/tensorflow/pull/87514
          BUILD_FLAGS: "--define=xnn_enable_avxvnniint8=false"
      - run: .github/scripts/upload_artifact.sh ${{ env.NX_XLA_REF }} ${{ env.NX_XLA_RELEASE_NAME }} tmp/cache/*/build/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  macos-arm:
    name: "aarch64-darwin-cpu"
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.NX_XLA_REF }}
      - run: brew install elixir
      - run: mix local.hex --force
      # Setup the compilation environment
      - uses: bazel-contrib/setup-bazel@0.14.0
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: python -m pip install --upgrade pip numpy
      # Build and upload the archive
      - run: mix deps.get
      - run: mix compile
        env:
          XLA_TARGET: cpu
      - run: .github/scripts/upload_artifact.sh ${{ env.NX_XLA_REF }} ${{ env.NX_XLA_RELEASE_NAME }} tmp/cache/*/build/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
