name: Release
on:
  release:
    types: [published]
  workflow_dispatch:
jobs:
  # linux x86_64 cpu/tpu
  linux:
    # We intentionally build on ubuntu 20 to compile against
    # an older version of glibc
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: erlef/setup-beam@v1
        with:
          otp-version: "24"
          elixir-version: "1.12.3"
      # Setup the compilation environment
      - uses: abhinavsingh/setup-bazel@v3
        with:
          version: "5.3.0"
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - run: python -m pip install --upgrade pip numpy
      # Build and upload the archives
      - run: mix deps.get
      - run: .github/scripts/compile_unless_exists.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          XLA_TARGET: cpu
          CC: gcc-9
      - run: .github/scripts/compile_unless_exists.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          XLA_TARGET: tpu
          CC: gcc-9
      - run: .github/scripts/upload_archives.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # darwin x86_64 cpu
  macos:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v3
      - run: brew install elixir
      - run: mix local.hex --force
      # Setup the compilation environment
      - uses: abhinavsingh/setup-bazel@v3
        with:
          version: "5.3.0"
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - run: python -m pip install --upgrade pip numpy
      # Build and upload the archive
      - run: mix deps.get
      - run: .github/scripts/compile_unless_exists.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          XLA_TARGET: cpu
          CC: gcc-9
      - run: .github/scripts/upload_archives.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # darwin aarch64 cpu (cross-compiled)
  macos_arm:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v3
      - run: brew install elixir
      - run: mix local.hex --force
      # Setup the compilation environment
      - uses: abhinavsingh/setup-bazel@v3
        with:
          version: "5.3.0"
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - run: python -m pip install --upgrade pip numpy
      # Build and upload the archive
      - run: mix deps.get
      - run: .github/scripts/compile_unless_exists.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          XLA_TARGET: cpu
          # Explicitly cross-compile for arm64
          BUILD_FLAGS: "--config=macos_arm64"
          CC: gcc-9
      - name: Rename archive
        run: |
          # Ensure tasks are compiled
          mix compile
          build_archive_dir=$(mix xla.info build_archive_dir)
          if [[ -d $build_archive_dir ]]; then
            archive_path=$(find $build_archive_dir -type f)
            actual_archive_path="${archive_path/x86_64/aarch64}"
            echo "$archive_path -> $actual_archive_path"
            mv $archive_path $actual_archive_path
          fi;
      - run: .github/scripts/upload_archives.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # linux x86_64 cuda
  linux_cuda:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - container: nvidia/cuda:11.1.1-cudnn8-devel-ubuntu20.04
            xla_target: cuda111
            python: "3.9"
          - container: nvidia/cuda:11.4.3-cudnn8-devel-ubuntu20.04
            xla_target: cuda114
            python: "3.9"
          - container: nvidia/cuda:11.8.0-cudnn8-devel-ubuntu20.04
            xla_target: cuda118
            python: "3.9"
    container: ${{ matrix.container }}
    env:
      # This env is normally set by default, but we need to mirror it into the container
      # ourselves (used by the actions/setup-beam).
      ImageOS: ubuntu20
      # Set the missing utf-8 locales, otherwise Elixir warns
      LANG: en_US.UTF-8
      LANGUAGE: en_US:en
      LC_ALL: en_US.UTF-8
      # Make sure installing packages (like tzdata) doesn't prompt for configuration
      DEBIAN_FRONTEND: noninteractive
    steps:
      # The base images are minimalistic, so we bring a few necessary system packages
      - name: Install system packages
        run: |
          # We need to install "add-apt-repository" first
          apt-get update && apt-get install -y software-properties-common
          # Add repository with the latest git version for action/checkout to properly clone the repo
          add-apt-repository ppa:git-core/ppa
          # We run as root, so sudo is not necessary per se, but some actions (like setup-bazel) make use of it
          apt-get update && apt-get install -y locales ca-certificates curl git sudo unzip wget
          # Install GitHub CLI used by our scripts
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          apt-get update && apt-get install -y gh
          # Update locales
          echo "$LANG UTF-8" >> /etc/locale.gen
          locale-gen
          update-locale LANG=$LANG
      # Proceed with the regular steps
      - uses: actions/checkout@v3
      - uses: erlef/setup-beam@v1
        with:
          otp-version: "24"
          elixir-version: "1.12.3"
      # Setup the compilation environment
      - uses: abhinavsingh/setup-bazel@v3
        with:
          version: "5.3.0"
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
        env:
          # Avoid permission errors for /github/home, in this case the directory
          # is used for pip cache and is not relevant either way
          HOME: /root
      - run: python -m pip install --upgrade pip numpy
      # Build and upload the archive
      - run: mix deps.get
      - run: .github/scripts/compile_unless_exists.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          XLA_TARGET: ${{ matrix.xla_target }}
      - run: .github/scripts/upload_archives.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
